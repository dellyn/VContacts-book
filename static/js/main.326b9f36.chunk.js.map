{"version":3,"sources":["components/Modal/index.js","components/Modal/Modal.js","components/ContactDetails/index.js","components/ContactDetails/ContactDetails.js","components/ContactListItem/index.js","components/ContactListItem/ContactListItem.js","components/ContactList/index.js","components/ContactList/ContactList.js","components/ContactAddForm/index.js","components/ContactAddForm/ContactAddForm.js","App.js","index.js"],"names":["Modal","active","setActive","children","className","onClick","e","stopPropagation","ContactDetails","state","addItem","onAddItem","setState","addContactField","userKeyField","userValueField","id","props","addContactValue","onChangeHandler","target","name","value","setModalActive","statusActive","modalActive","deleteField","key","modalDeleteId","modalDeleteKey","hideDelMod","confirmDeleteFild","deleteÐ¡ontactValue","editField","userKey","userValue","editContactValue","confirmCancel","cancelLastChange","onCancelChange","enterHandler","clearFields","this","getContactData","storage","contactListItem","Object","keys","filter","item","map","type","placeholder","onChange","Component","ContactListItem","onDeleted","contactDetails","src","alt","firstName","lastName","ContactList","contacts","itemProps","ContactAddForm","phone","email","onContactAdded","contactValues","addContact","htmlFor","App","maxId","contactData","cancelBtn","contactValue","contactId","index","findIndex","el","operationElem","assign","slice","deleteContact","values","newContact","undefined","editedField","contactKeyField","contactValueField","operationArr","defineProperty","getOwnPropertyDescriptor","newContactData","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.326b9f36.chunk.js","sourcesContent":["import Modal from \"./Modal\";\r\n\r\nexport default Modal;\r\n","import React from \"react\";\r\nimport \"./Modal.scss\";\r\nconst Modal = ({ active, setActive, children }) => {\r\n  return (\r\n    <div\r\n      className={active ? \"modal active\" : \"modal\"}\r\n      onClick={() => setActive(false)}\r\n    >\r\n      <div\r\n        className={active ? \"modal-content active\" : \"modal-content\"}\r\n        onClick={(e) => e.stopPropagation()}\r\n      >\r\n        <button className=\"close-btn\" onClick={() => setActive(false)}>\r\n          x\r\n        </button>\r\n        <div className=\"modal-root\">{children}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","import ContactDetails from \"./ContactDetails\";\r\n\r\nexport default ContactDetails;\r\n","import React, { Component } from \"react\";\r\nimport Modal from \"../Modal\";\r\nimport \"./ContactDetails.scss\";\r\n\r\nexport default class ContactDetails extends Component {\r\n  state = {\r\n    addItem: false,\r\n  };\r\n\r\n  // toggle field for add new useÐº fielld\r\n  onAddItem = () => {\r\n    this.setState((state) => {\r\n      return {\r\n        addItem: !this.state.addItem,\r\n      };\r\n    });\r\n  };\r\n  addContactField = (userKeyField, userValueField, id) => {\r\n    this.props.addContactValue(userKeyField, userValueField, id);\r\n  };\r\n\r\n  // Get value from inputs and write in state\r\n  onChangeHandler = (e) => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n  // controls state modal window\r\n  setModalActive = (statusActive) => {\r\n    this.setState(({ modalActive }) => {\r\n      return {\r\n        modalActive: statusActive,\r\n      };\r\n    });\r\n  };\r\n\r\n  deleteField = (key, id) => {\r\n    this.setState(() => {\r\n      return {\r\n        modalDeleteId: id,\r\n        modalDeleteKey: key,\r\n        modalActive: true,\r\n        hideDelMod: false,\r\n      };\r\n    });\r\n  };\r\n  confirmDeleteFild = () => {\r\n    this.props.deleteÐ¡ontactValue(\r\n      this.state.modalDeleteKey,\r\n      this.state.modalDeleteId\r\n    );\r\n    this.setModalActive(false);\r\n  };\r\n\r\n  editField = (key, userKey, userValue, id) => {\r\n    this.props.editContactValue(key, userKey, userValue, id);\r\n\r\n    this.setState(() => {\r\n      return {\r\n        hideDelMod: true,\r\n      };\r\n    });\r\n  };\r\n\r\n  confirmCancel = () => {\r\n    this.props.cancelLastChange();\r\n    this.setModalActive(false);\r\n  };\r\n  onCancelChange = () => {\r\n    this.setState(() => {\r\n      return {\r\n        hideDelMod: true,\r\n      };\r\n    });\r\n    this.setModalActive(true);\r\n  };\r\n\r\n  // this function for process user data in custom field\r\n  enterHandler = (e) => {\r\n    this.setState({\r\n      clearFields: false,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { getContactData, storage } = this.props;\r\n    const id = getContactData.id;\r\n    const contactListItem = Object.keys(getContactData)\r\n      .filter((item) => item !== \"id\")\r\n      .map((key) => {\r\n        return (\r\n          <div key={getContactData[key]}>\r\n            <input\r\n              type=\"text\"\r\n              name={key}\r\n              placeholder={key}\r\n              onChange={this.enterHandler}\r\n            />\r\n            <input\r\n              type=\"text\"\r\n              placeholder={getContactData[key]}\r\n              name={getContactData[key]}\r\n              onChange={this.enterHandler}\r\n            />\r\n\r\n            <button\r\n              className=\"edit-item\"\r\n              onClick={() =>\r\n                this.props.editContactValue(\r\n                  key,\r\n                  this.state[key],\r\n                  this.state[getContactData[key]],\r\n                  id\r\n                )\r\n              }\r\n            >\r\n              Edit\r\n            </button>\r\n\r\n            <button\r\n              className=\"add-contact\"\r\n              onClick={() => this.deleteField(key, id)}\r\n            >\r\n              Delete\r\n            </button>\r\n            <div className={this.state.hideDelMod ? \"dn\" : \"\"}>\r\n              <Modal\r\n                active={this.state.modalActive}\r\n                setActive={this.setModalActive}\r\n              >\r\n                <div className=\"\">\r\n                  <p className=\"confirm-text\">Delete confirmation</p>\r\n                  <button onClick={() => this.confirmDeleteFild()}>Yes</button>\r\n                  <button onClick={() => this.setModalActive(false)}>No</button>\r\n                </div>\r\n              </Modal>\r\n            </div>\r\n          </div>\r\n        );\r\n      });\r\n    const { userKeyField, userValueField } = this.state;\r\n    return (\r\n      <div className=\"contact-details\">\r\n        <h1 className=\"contact-details-title\">Contact Information</h1>\r\n        <button className=\"close\" onClick={() => this.props.setActive(false)}>\r\n          X\r\n        </button>\r\n\r\n        <button className=\"add-item\" onClick={this.onAddItem}>\r\n          Add field\r\n        </button>\r\n        <button\r\n          className={storage !== null ? \"step-back\" : \"dn\"}\r\n          onClick={this.onCancelChange}\r\n        >\r\n          Cancel last change\r\n        </button>\r\n        <Modal active={this.state.modalActive} setActive={this.setModalActive}>\r\n          <div className=\"\">\r\n            <p className=\"confirm-text\">Cancel changes?</p>\r\n            <button onClick={() => this.confirmCancel()}>Yes</button>\r\n            <button onClick={() => this.setModalActive(false)}>No</button>\r\n          </div>\r\n        </Modal>\r\n        <ul>{contactListItem}</ul>\r\n        <div\r\n          className={this.state.addItem ? \"custom-field\" : \"custom-field dn\"}\r\n        >\r\n          <div>\r\n            <input\r\n              type=\"text\"\r\n              name=\"userKeyField\"\r\n              placeholder=\"..key\"\r\n              onChange={this.onChangeHandler}\r\n            />\r\n            <input\r\n              type=\"text\"\r\n              name=\"userValueField\"\r\n              placeholder=\"..value\"\r\n              onChange={this.onChangeHandler}\r\n            />\r\n            <button\r\n              className=\"add-item\"\r\n              onClick={() =>\r\n                this.addContactField(userKeyField, userValueField, id)\r\n              }\r\n            >\r\n              Ok\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import ContactListItem from \"./ContactListItem\";\r\n\r\nexport default ContactListItem;\r\n","import React, { Component } from \"react\";\r\nimport \"./ContactListItem.scss\";\r\nimport ContactDetails from \"../ContactDetails\";\r\nexport default class ContactListItem extends Component {\r\n  state = {\r\n    modalActive: false,\r\n  };\r\n\r\n  setModalActive = (statusActive) => {\r\n    this.setState(({ modalActive }) => {\r\n      return {\r\n        modalActive: statusActive,\r\n      };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      onDeleted,\r\n      addContactValue,\r\n      deleteÐ¡ontactValue,\r\n      cancelLastChange,\r\n      editContactValue,\r\n      storage,\r\n      ...contactDetails\r\n    } = this.props;\r\n    return (\r\n      <div>\r\n        <div\r\n          className=\"contact-list-item\"\r\n          onClick={() => this.setModalActive(true)}\r\n        >\r\n          <div className=\"contact-person\">\r\n            <img\r\n              src=\"https://www.flaticon.com/svg/static/icons/svg/1077/1077114.svg\"\r\n              alt=\"person\"\r\n              className=\"contact-person-img\"\r\n            />\r\n            <p className=\"contact-person-name\">\r\n              {contactDetails.firstName} {contactDetails.lastName}\r\n            </p>\r\n          </div>\r\n          <button className=\"delete-btn\" onClick={this.props.onDeleted}>\r\n            x\r\n          </button>\r\n        </div>\r\n        <div\r\n          className={\r\n            this.state.modalActive\r\n              ? \"active contact-details-layer\"\r\n              : \"contact-details-layer \"\r\n          }\r\n        >\r\n          <div className=\"contact-details-content \">\r\n            <ContactDetails\r\n              getContactData={contactDetails}\r\n              storage={storage}\r\n              deleteÐ¡ontactValue={this.props.deleteÐ¡ontactValue}\r\n              editContactValue={editContactValue}\r\n              addContactValue={addContactValue}\r\n              cancelLastChange={cancelLastChange}\r\n              setActive={this.setModalActive}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import ContactList from \"./ContactList\";\r\n\r\nexport default ContactList;\r\n","import React from \"react\";\r\nimport ContactListItem from \"../ContactListItem\";\r\n\r\nimport \"./ContactList.scss\";\r\n\r\nconst ContactList = ({\r\n  contacts,\r\n  storage,\r\n  onDeleted,\r\n  addContactValue,\r\n  deleteÐ¡ontactValue,\r\n  editContactValue,\r\n  cancelLastChange,\r\n}) => {\r\n  const contactListItem = contacts.map((item) => {\r\n    const { ...itemProps } = item;\r\n    const { id } = item;\r\n    return (\r\n      <ContactListItem\r\n        key={id}\r\n        {...itemProps}\r\n        storage={storage}\r\n        onDeleted={() => onDeleted(id)}\r\n        addContactValue={addContactValue}\r\n        deleteÐ¡ontactValue={deleteÐ¡ontactValue}\r\n        editContactValue={editContactValue}\r\n        cancelLastChange={cancelLastChange}\r\n      />\r\n    );\r\n  });\r\n\r\n  return (\r\n    <section className=\"contact-list\">\r\n      <div className=\"container\">\r\n        <div className=\"contact-list-menu\">{contactListItem}</div>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\nexport default ContactList;\r\n","import ContactAddForm from \"./ContactAddForm\";\r\n\r\nexport default ContactAddForm;\r\n","import React, { Component } from \"react\";\r\nimport Modal from \"../Modal\";\r\nimport \"./ContactAddForm.scss\";\r\n\r\nexport default class ContactAddForm extends Component {\r\n  state = {\r\n    modalActive: false,\r\n    firstName: null,\r\n    lastName: null,\r\n    phone: null,\r\n    email: null,\r\n  };\r\n  // value from input\r\n  onChangeHandler = (e) => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n  // convert data entered by user into contact\r\n  onContactAdded = () => {\r\n    const { modalActive, ...contactValues } = this.state;\r\n    this.props.addContact({ ...contactValues });\r\n    this.setModalActive(false);\r\n  };\r\n  setModalActive = (statusActive) => {\r\n    this.setState(({ modalActive }) => {\r\n      return {\r\n        modalActive: statusActive,\r\n      };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const children = (\r\n      <div className=\"contact-add-child\">\r\n        <p>\r\n          <label htmlFor=\"firstName\">First Name: </label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"firstName\"\r\n            placeholder=\"Name\"\r\n            onChange={this.onChangeHandler}\r\n          />\r\n        </p>\r\n        <p>\r\n          <label htmlFor=\"lastName\">Last Name: </label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"lastName\"\r\n            id=\"lastName\"\r\n            onChange={this.onChangeHandler}\r\n          />\r\n        </p>\r\n        <p>\r\n          <label htmlFor=\"phone\">Phone: </label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"phone\"\r\n            id=\"phone\"\r\n            onChange={this.onChangeHandler}\r\n          />\r\n        </p>\r\n        <p>\r\n          <label htmlFor=\"email\">Email: </label>\r\n          <input\r\n            type=\"email\"\r\n            name=\"email\"\r\n            id=\"email\"\r\n            onChange={this.onChangeHandler}\r\n          />\r\n        </p>\r\n        <button className=\"add-contact-btn\" onClick={this.onContactAdded}>\r\n          Add Contact\r\n        </button>\r\n      </div>\r\n    );\r\n    return (\r\n      <div className=\"contact-add-form\">\r\n        <Modal active={this.state.modalActive} setActive={this.setModalActive}>\r\n          {children}\r\n        </Modal>\r\n        <button\r\n          className=\"add-contact\"\r\n          onClick={() => this.setModalActive(true)}\r\n        >\r\n          +\r\n        </button>\r\n        <h1 className=\"logo\">\r\n          <span>VC</span>ontacts\r\n        </h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./App.scss\";\r\nimport ContactList from \"../src/components/ContactList\";\r\nimport ContactAddForm from \"../src/components/ContactAddForm\";\r\n\r\nexport default class App extends Component {\r\n  maxId = 100;\r\n  state = {\r\n    contactData: [\r\n      {\r\n        firstName: \"Volodymyr\",\r\n        lastName: \"Velikiy\",\r\n        phone: \"380978766813\",\r\n        email: \"test@gmail.com\",\r\n        id: 1,\r\n      },\r\n      {\r\n        firstName: \"Anatoliy\",\r\n        lastName: \"Kurcha\",\r\n        phone: \"380734080939\",\r\n        email: \"mail@gmail.com\",\r\n        id: 2,\r\n      },\r\n      {\r\n        firstName: \"Test\",\r\n        lastName: \"Crack\",\r\n        phone: \"3809999999\",\r\n        email: \"test@gmail.com\",\r\n        id: 3,\r\n      },\r\n    ],\r\n    cancelBtn: false,\r\n    // storage keeps the last user change\r\n    storage: null,\r\n  };\r\n\r\n  // Delete contacts field\r\n  deleteÐ¡ontactValue = (contactValue, contactId) => {\r\n    this.setState(({ contactData }) => {\r\n      const index = contactData.findIndex((el) => el.id === contactId);\r\n      let operationElem = Object.assign({}, contactData[index]);\r\n      delete operationElem[contactValue];\r\n      const newContactData = [\r\n        ...contactData.slice(0, index),\r\n        operationElem,\r\n        ...contactData.slice(index + 1),\r\n      ];\r\n      return {\r\n        contactData: newContactData,\r\n        storage: contactData[index],\r\n      };\r\n    });\r\n  };\r\n  // Delete all info about contact\r\n  deleteContact = (contactId) => {\r\n    this.setState(({ contactData }) => {\r\n      const index = contactData.findIndex((el) => el.id === contactId);\r\n      const newContactData = [\r\n        ...contactData.slice(0, index),\r\n        ...contactData.slice(index + 1),\r\n      ];\r\n\r\n      return {\r\n        contactData: newContactData,\r\n      };\r\n    });\r\n  };\r\n  // Adding new contact\r\n  addContact = (values) => {\r\n    this.maxId = this.maxId++;\r\n    const newContact = {\r\n      id: this.maxId++,\r\n      firstName: values.firstName,\r\n      lastName: values.lastName,\r\n      phone: values.phone,\r\n      email: values.email,\r\n    };\r\n    this.setState(({ contactData }) => {\r\n      const newContactData = [...contactData, newContact];\r\n      return {\r\n        contactData: newContactData,\r\n      };\r\n    });\r\n  };\r\n  // Adding new fields for contact\r\n  addContactValue = (userKeyField, userValueField, contactId) => {\r\n    if (userKeyField && userValueField !== undefined) {\r\n      this.setState(({ contactData }) => {\r\n        const index = contactData.findIndex((el) => el.id === contactId);\r\n        let operationElem = Object.assign({}, contactData[index]);\r\n        operationElem[userKeyField] = userValueField;\r\n        const newContactData = [\r\n          ...contactData.slice(0, index),\r\n          operationElem,\r\n          ...contactData.slice(index + 1),\r\n        ];\r\n\r\n        return {\r\n          contactData: newContactData,\r\n          storage: contactData[index],\r\n        };\r\n      });\r\n    }\r\n  };\r\n  // User editing of fields\r\n  editContactValue = (\r\n    editedField,\r\n    contactKeyField,\r\n    contactValueField,\r\n    contactId\r\n  ) => {\r\n    if (\r\n      (editedField !== undefined && contactKeyField !== undefined) ||\r\n      contactValueField !== undefined\r\n    ) {\r\n      this.setState(({ contactData }) => {\r\n        const index = contactData.findIndex((el) => el.id === contactId);\r\n        let operationArr = Object.assign({}, contactData[index]);\r\n\r\n        if (contactValueField !== undefined) {\r\n          operationArr[editedField] = contactValueField;\r\n        }\r\n\r\n        if (editedField !== contactKeyField && contactKeyField !== undefined) {\r\n          Object.defineProperty(\r\n            operationArr,\r\n            contactKeyField,\r\n            Object.getOwnPropertyDescriptor(operationArr, editedField)\r\n          );\r\n          delete operationArr[editedField];\r\n        }\r\n\r\n        const newContactData = [\r\n          ...contactData.slice(0, index),\r\n          operationArr,\r\n          ...contactData.slice(index + 1),\r\n        ];\r\n\r\n        return {\r\n          storage: contactData[index],\r\n\r\n          contactData: newContactData,\r\n        };\r\n      });\r\n    }\r\n  };\r\n\r\n  // backup the last changes and restore him\r\n  cancelLastChange = () => {\r\n    if (this.state.storage !== null) {\r\n      this.setState(({ storage, contactData }) => {\r\n        const index = contactData.findIndex((el) => el.id === storage.id);\r\n        const newContactData = [\r\n          ...contactData.slice(0, index),\r\n          storage,\r\n          ...contactData.slice(index + 1),\r\n        ];\r\n        return {\r\n          contactData: newContactData,\r\n          storage: null,\r\n        };\r\n      });\r\n    } else {\r\n      this.setState((state) => {\r\n        return {\r\n          cancelBtn: true,\r\n        };\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"container\">\r\n          <div className=\"app-block\">\r\n            <ContactAddForm addContact={this.addContact} />\r\n            <ContactList\r\n              addContactValue={this.addContactValue}\r\n              cancelLastChange={this.cancelLastChange}\r\n              contacts={this.state.contactData}\r\n              storage={this.state.storage}\r\n              onDeleted={this.deleteContact}\r\n              deleteÐ¡ontactValue={this.deleteÐ¡ontactValue}\r\n              editContactValue={this.editContactValue}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}